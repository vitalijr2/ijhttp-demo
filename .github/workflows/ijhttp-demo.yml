# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: IntelliJ HTTP Client with GitHub Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: maven
      - name: Build with Maven
        run: ./mvnw
      - name: Temporarily save target and test requests
        uses: actions/upload-artifact@master
        with:
          name: tests-and-target
          path: |
            echo.http
            private-env.json
            public-env.json
            target
          retention-days: 1

  run-with-maven-plugin:

    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Download ijhttp
      run: curl -f -s -L -o ijhttp.zip https://jb.gg/ijhttp/latest
    - name: Unpack ijhttp
      run: unzip -nq ijhttp.zip -d target
    - name: Remove ijhttp.zip
      run: rm ijhttp.zip
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: maven
    - name: Run with Maven plugin
      run: ./mvnw verify -ntp -Pspring-boot,maven-plugin

  run-with-docker-image:

    runs-on: ubuntu-latest

    needs: build
    container:
      image: jetbrains/intellij-http-client:233.11799.241

    steps:
      - name: Retrieve saved test requests and target
        uses: actions/download-artifact@master
        with:
          name: tests-and-target
          path: .
      - name: Run the application
        run: java -jar target/ijhttp-demo.jar &
      - name: Wait the application
        run: while ! nc -z localhost 8080 </dev/null; do sleep 5; done
      - name: Run tests
        run: java -cp "/intellij-http-client/*" com.intellij.httpClient.cli.HttpClientMain --env=demo --env-variables "another-variable=you can see it too" -V "third-variable=you can see me too" -V localport=8080 --env-file=public-env.json --private-env-file=private-env.json "--private-env-variables=hidden-variable2=you cannot see it too" -P "last-variable=you cannot see me too" --report --log-level=VERBOSE echo.http
